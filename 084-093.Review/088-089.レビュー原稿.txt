（タイトル）

（リード文）

（見出し）

（本文）
指の位置情報は「Pointable」というオブジェクトで認識されておりそれぞれに個別のidを割り振って位置情報を追跡をしている。同様に掌<<てのひら>>にも「Hand」というオブジェクトでユニークなidが割り振られておりそれぞれのLeap Motionからの距離から左右どちらの手に属する指なのかを紐付けている。また、手の情報は単に指の数の情報だけにとどまらず、その形や傾きなども正確にデータ化している。たとえばHandにはpalmPosition（Leap Motionからの位置）とpalmNormal（Leap Motionから見た手の傾き具合を垂直度で表したもの）を持ち、手の状態を表現している。これだけでなくsphereCenterとsphereRadiusというパラメータが与えられ、仮想的にボールを手で掴んだ状態を作り出して掌の握り具合をsphereRadiusが広ければ「開いている」、小さければ「閉じている」といった具合に認識が可能だ。このようにLeap Motionは手の形を左右別々にほぼ完全な形で数値化できているため、片手ずつ別の動作をしたり、従来のデバイスでは認識できなかったジェスチャ操作も受け付けることができる。
具体的な例を見てみよう。インタラクティブゲーム「Kyoto」では本編の中に出て来る光のオブジェクトを「掴んで」別のところに運ぶという動作が組み込まれている。これは同じHandオブジェクトのsphereRadiusが小さくなり、そのHnad idに結びつくPointableオブジェクトが0になったタイミングをイベントとして「掴んだ」判定をしている。目的の場所までドラッグして、オブジェクトをリリースするときに手を開くと再びsphereRadiusが大きくなり、Ponntableオブジェクトが複数本認識される。このタイミングで「離した」とイベント処理することで従来のドラッグ&ドロップに相当する処理をよりリアルにゲームで再現することができている。
手の高さや傾きを利用したものとしてはすでに「Google Earth」が早期から対応している。手を高く持ち上げれば上昇、下げれば下降といったpalmPositionを使った基本的な動作から、palmNormalによる傾き検知を使って急上昇や急下降、視点の回転といった動作を実現している。こういった動作はフライトシミュレーションをするものや物理エンジンを使う「Puddle」のようなゲームなどと相性がよく、従来のゲームコントローラ以上に臨場感を増すユーザ体験を提供することができるだろう。

（図版）
picture01.psd

（キャプション）
[0]であるXがマイナスなので左手

（図版）
picture02.psd

（キャプション）
こちらのidが若いがtimeVisibleが短い。idは100個までしかないようだ

（見出し）

（本文）
Leap Motionに内蔵されたセンサーが取得する範囲は約600mm、約150°の逆ピラミッド状のエリアがいわゆる「公称値」で、イメージとしては27インチモデルのiMacとほぼ同じの領域をカバーしていると考えていい。この範囲内であればすべての指の動きを逃すことなく正しくデータが取得できた。また、実際にはもう少し離れてしまっても一度認識したオブジェクトはセンサーが認識できる限りは追跡しているのも確認した。逆にいったん見失ってしまうと、60cmのエリアに外周ぎりぎりに入っても認識が始まらないことがある。これはおそらく周囲に存在するかもしれないオブジェクトをノイズとしてフィルタリングするための措置だろう。同様に、Leap Motionの直上も30mm程度は離さないと認識を開始できない。これは赤外線LEDが放出するマッピングパターンの歪みを近すぎると解析できないからだと推測される。このことからLeap Motionを利用したインターフェイスデザインを行う際には、なるべく画面の周辺は利用せずにユーザのインタラクションは画面の中心で行うようにレイアウトした方が「ポインタが動作しない」などのトラブルを防ぐことができるだろう。
このデザインの好例としてはペイント系アプリケーションの「Deco Sketch」が挙げられる。Deco ScketchではZ軸の位置情報を利用し、手がLeap Motionから近いときはペイントするモードに、離れているときはツールパレットを表示することでインターフェイスを巧みに処理しながら、従来のマウスやトラックパッドではできなかったインターフェイス表現をするひとつの解決策といえるだろう。

（図版）
picture03.psd
picture04.psd

（キャプション）
両手がややY軸（上方）に展開されているため補正されている

（図版）
picture05.psd
picture06.psd

（キャプション）
ホバリングは「touch（クリック）」として認識していない

（見出し）

（本文）
スキャン速度はフレームレート換算で最大290fpsとKinectの約10倍の性能を持っている。これは指先の微細な動きにまで対応するのにも充分な精度を出すだけの性能があるといえるだろう。Leap Motionで検出される動きにはこれを利用してvelocity（どれくらいの速度でオブジェクトが移動しているのか）パラメータがmm単位で取得することが可能になっている。実際Leap Motionで検出できる動きは1/100mmまで保証されており、これは従来のセンサー系デバイスの200倍近い精度だという。これを使った動きとしてLeap Motionではあらかじめいくつかの動作がジェスチャとして設定されている。
一般的な動作としては「swipe（フリック）」と「screen tap」だろう。一定の速度で左右、もしくは前後に指を動かした場合Leap Motionはその動きにgesture typeとしてswipeやscreen tapの付加情報を与える。人気ゲームである「Friut Ninja」や「Cut the Rope」はその代表例でもあるといえるが、画面を操作するユーティリティソフト「Touchless」ではさらにこの機能を使い、たとえばMac版であれば2本指でスワイプした場合にはスクロールを、3本指でスワイプした場合にはMission Controlを、4本指でスワイプした場合には画面の切り替えといった具合でトラックパッドのマルチタッチ動作を再現することに成功している。
他にも「circle」と「keytap」というジェスチャが定義されている。指先で円を描くような動作はgesture typeとしてcircleが追加される。これは音楽アプリケーションの「CordionCondouctor」では各種パラメータのつまみを回す動作に割り当てられていたり、ペイント系アプリケーションの「Deco Sketch」では取り消しの動作として割り当てられている。どちらのアプリケーションでもコンテクストに応じた好例だといえる。もうひとつのキータップは文字通りキーを押下したときの動きをトレースしgesture typeとしてkey tapが追加される。こちらはあまり利用例がまだないが、バーチャルキーボードやチェックボックスのオンオフなどのユーザインターフェイスの実装の際には利用が期待できるパラメータといえるだろう。
もうひとつLeap Motionの精度を高める認識として指をオブジェクトとして扱うPointableにはlength（指の長さ）とwidth（指の太さ）、そしてdirection（指の向いている方向）が個々に割り当てられている。これは指の種類を認識するだけでなく、directionと先述のVelocityを組み合わせることで指先の動きだけでポインタを大きく動かすことができるようになる。「Touchless」では、スワイプ動作など指が画面に対して平行に向いている場合にはダイナミックに動作をするが、指先の角度を変えて指示する場合にはてこの原理のように相対的に速度をコントロールすることでポインタの移動に際する負担を軽減する工夫がなされている。また、Leap Motionは指ではなくペンのように細長いオブジェクトを掴んで操作することも可能になっており、この場合にはToolsというパラメータがPointableに与えられ、明示的にペン型デバイスを握っていることを把握できるようになっている。

（図版）
picture07.psd

（キャプション）
指なのか、それともtool（ペンデバイス）なのかのBOOL値

（図版）
picture08.psd

（キャプション）
timestampはLeap Motionの起動時間でカウントする

（見出し）

（本文）
Leap Motionは単独のユーザが操作することを前提としているが、ここは敢えてどこまで認識できるのか性能の限界に挑戦してみた。まず手のオブジェクト情報だが5本以上の認識が可能だ。前述の通り、重なりを推測ができないためこの空間の中に25本の指オブジェクトを重ならずに配置することがそもそも難しいため、推測になるがおそらく「重ならない限り空間上のオブジェクト認識に限界はない」というのが正しいところだろう。現実的な範囲では2人で協力するようなゲームなどの開発は可能だと考えられる。
もうひとつのテストが指の太さのテストだ。指を伸ばしてすべてくっつけた状態でLeap Motionの上にかざした場合は、Pointerオブジェクトは1つとしか認識されなかった。ある程度、充分な隙間がないと複数の指としては認識しないようだ（逆に親指はほかの指と異なる位置にあるせいか、くっつけた状態でも別のPointerとして認識することが多い）。このため「指をそろえて特定のジェスチャをする」という情報はセンサーから正確には取得できないため、オリジナルのジェスチャを定義したい場合には注意が必要だろう。

（図版）
picture09.psd

（キャプション）
両手を入れているので hands.length=2 と認識されている
